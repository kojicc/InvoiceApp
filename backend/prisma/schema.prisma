datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 Int      @id @default(autoincrement())
  username           String   @unique
  email              String   @unique
  password           String?  // Made optional for OAuth users who haven't set password
  role               String   @default("client") // "admin" or "client"
  clientId           Int?     // Reference to client if role is "client"
  client             Client?  @relation(fields: [clientId], references: [id])
  isEmailVerified    Boolean  @default(false)
  emailVerificationToken String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  googleId           String?  @unique // For Google OAuth
  lastLogin          DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}


model Client {
  id        Int      @id @default(autoincrement())
  name      String
  contact   String?
  address   String?
  users     User[]   // Users associated with this client
  invoices  Invoice[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id           Int       @id @default(autoincrement())
  invoiceNo    String    @unique
  issueDate    DateTime
  dueDate      DateTime
  status       String    @default("unpaid")
  total        Float
  paidAmount   Float     @default(0)
  currency     String    @default("USD")
  exchangeRate Float     @default(1.0)
  
  // Recurring invoice fields
  isRecurring     Boolean   @default(false)
  recurringType   String?   // "monthly", "weekly", "quarterly", "yearly"
  recurringDay    Int?      // Day of month for monthly (1-31)
  recurringEndDate DateTime? // When to stop recurring
  parentInvoiceId Int?      // Reference to original recurring invoice
  nextDueDate     DateTime? // Next scheduled date for recurring
  
  clientId   Int
  client     Client    @relation(fields: [clientId], references: [id])
  items      Item[]
  payments   Payment[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Item {
  id         Int      @id @default(autoincrement())
  name       String
  quantity   Int
  unitPrice  Float
  invoiceId  Int
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  method    String   @default("cash") // "cash", "card", "bank_transfer", "check"
  notes     String?
  paidDate  DateTime @default(now())
  invoiceId Int
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  createdAt DateTime @default(now())
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  action      String   // "create", "update", "delete"
  entityType  String   // "invoice", "client", "payment"
  entityId    Int
  userId      Int?
  changes     String?  // JSON string of changes
  timestamp   DateTime @default(now())
  ipAddress   String?
  userAgent   String?
}
